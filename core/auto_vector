#pragma once
#include <initializer_list>
#include <vector>
#include <functional>
#include <iterator>
namespace Auto {
    template<class T,class _Alloc = std::allocator<T>>
    class Vector : public std::vector<T,_Alloc>{
        public:
        using iterator = typename std::vector<T,_Alloc>::iterator;
        Vector(const std::vector<T,_Alloc> & vec):std::vector<T,_Alloc>(vec){

        }

        Vector(const std::initializer_list<T> & vec):std::vector<T,_Alloc>(vec){

        }

        Vector (const iterator begin,const iterator end):std::vector<T,_Alloc>(begin,end){}
        Vector (size_t size,const T elem):std::vector<T,_Alloc>(size,elem){}

        template<class _Iter>
		Vector(_Iter _First, _Iter _Last):std::vector<T,_Alloc>(_First,_Last){}

        Vector(size_t size):std::vector<T,_Alloc>(size){}

        Vector(const Vector<T,_Alloc> &) = default;

        Vector(Vector<T,_Alloc> &&) = default;

        ~Vector(){ this->clear(); }


        void every(std::function<void(T &value,size_t index)> func){
            for(size_t i = 0 ; i< this->size() ; i++){
                func((*this)[i],i);
            }
        }

        void every(std::function<void(const T &value,size_t index)> func)const{
            for(size_t i = 0 ; i< this->size() ; i++){
                func((*this)[i],i);
            }
        }

        void every(std::function<void(T &value)> func){
            for(auto i : *this){
                func(i);
            }
        }

        void every(std::function<void(const T &value)> func)const{
            for(auto i : *this){
                func(i);
            }
        }
    };
};